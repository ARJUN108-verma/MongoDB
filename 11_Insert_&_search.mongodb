// 1. Switch to (or create) database
use indexing_demo

// 2. Drop any existing data for a clean slate
db.products.drop()

// 3. Insert some sample documents
db.products.insertMany([
  { name: "Wireless Mouse",       category: "Electronics", price: 25,  description: "Ergonomic wireless mouse, 2.4 GHz", stock: 150 },
  { name: "Gaming Keyboard",      category: "Electronics", price: 75,  description: "RGB mechanical gaming keyboard", stock: 80  },
  { name: "Organic Green Tea",    category: "Grocery",     price: 15,  description: "100% organic loose-leaf green tea", stock: 200 },
  { name: "Running Shoes",        category: "Apparel",     price: 120, description: "Lightweight breathable running shoes", stock: 60  },
  { name: "Bluetooth Speaker",    category: "Electronics", price: 45,  description: "Portable Bluetooth speaker with deep bass", stock: 110 },
  { name: "Cotton T‑Shirt",       category: "Apparel",     price: 20,  description: "100% cotton, unisex T‑shirt", stock: 300  }
])

// 4. Create Indexes
// 4.1 Single‐field index on price (ascending)
db.products.createIndex({ price: 1 })

// 4.2 Compound index on category (asc) + price (desc)
db.products.createIndex({ category: 1, price: -1 })

// 4.3 Text index on name + description for full‑text search
db.products.createIndex(
  { name: "text", description: "text" },
  { default_language: "english", weights: { name: 10, description: 5 } }
)

// 5. List all indexes on the collection
printjson( db.products.getIndexes() )

// 6. Query examples

// 6.1 Find all electronics under $50 (uses the compound index)
print("\n––– Electronics <$50 –––")
db.products.find(
  { category: "Electronics", price: { $lt: 50 } },
  { name: 1, price: 1, _id: 0 }
)

// 6.2 Text search for the word “wireless”
//    This uses the text index, and you can project the relevance score
print("\n––– Text search: “wireless” –––")
db.products.find(
  { $text: { $search: "wireless" } },
  { name: 1,
    description: 1,
    score: { $meta: "textScore" },
    _id: 0 }
).sort({ score: { $meta: "textScore" } })

// 7. Explain plans to see index usage

// 7.1 Explain the category+price query
print("\n[EXPLAIN] Electronics <$50")
printjson(
  db.products.find(
    { category: "Electronics", price: { $lt: 50 } }
  ).explain("executionStats")
)

// 7.2 Explain the text search
print("\n[EXPLAIN] Text search “wireless”")
printjson(
  db.products.find(
    { $text: { $search: "wireless" } }
  ).explain("executionStats")
)
